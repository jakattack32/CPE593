def burrows_wheeler_transform(text):
    # Generate all cyclic rotations of the text
    rotations = [text[i:] + text[:i] for i in range(len(text))]

    # Sort the rotations lexicographically
    rotations.sort()

    # Extract the last characters of each rotation to form the transformed string
    transformed_string = ''.join(rotation[-1] for rotation in rotations)

    # Find the original index (row) of the original text in the sorted rotations
    original_index = rotations.index(text)

    return transformed_string, original_index

def inverse_burrows_wheeler_transform(transformed_string, original_index):
    # Create a list of empty strings to store intermediate steps
    table = [''] * len(transformed_string)

    # Fill in the first column of the table with the characters of the transformed string
    for i in range(len(transformed_string)):
        table[i] = transformed_string[i]

    # Sort the table
    table.sort()

    # Iterate to construct the remaining columns of the table
    for j in range(1, len(transformed_string)):
        table = [transformed_string[i] + table[i] for i in range(len(transformed_string))]
        table.sort()

    # Find the original text by locating the row that ends with the '$' character
    original_text = [row for row in table if row.endswith('$')][original_index]

    return original_text

# Example Usage:
text = "banana$"
transformed, index = burrows_wheeler_transform(text)
print("Transformed:", transformed)
original = inverse_burrows_wheeler_transform(transformed, index)
print("Original:", original)
