class SymbolBalance:
    def __init__(self):
        self.stack = []

    def checkSyntax(self, input_str):
        for char in input_str:
            if char in "{[(":
                self.stack.append(char)
            elif char == "}":
                if not self.stack:
                    return f"Error2: Empty stack popped: {char}"
                top_symbol = self.stack.pop()
                if top_symbol != "{":
                    return f"Error3: Symbol mismatch: {char}, {top_symbol}"
            elif char == "]":
                if not self.stack:
                    return f"Error2: Empty stack popped: {char}"
                top_symbol = self.stack.pop()
                if top_symbol != "[":
                    return f"Error3: Symbol mismatch: {char}, {top_symbol}"
            elif char == ")":
                if not self.stack:
                    return f"Error2: Empty stack popped: {char}"
                top_symbol = self.stack.pop()
                if top_symbol != "(":
                    return f"Error3: Symbol mismatch: {char}, {top_symbol}"
            

        if self.stack:
            return f"Error1: Non-empty stack after passing: {self.stack[-1]}"
 
        else:
            return "Symbol Balanced"

# Example usage:
if __name__ == "__main__":
    symbol_balance = SymbolBalance()
    input_str = input("Enter an expression: ")
    syntax_result = symbol_balance.checkSyntax(input_str)
    print(syntax_result)
