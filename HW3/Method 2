class SymbolBalance:
    def __init__(self):
        self.stack = []

    def checkSyntax(self, input_str):
        for char_index, char in enumerate(input_str):
            if char in "{[(":
                self.stack.append((char, char_index))  
            elif char in "}])":
                if not self.stack:
                    return f"Error2: Empty stack popped: {char}"
                top_symbol, top_index = self.stack.pop()
                if not self.isMatchingPair(top_symbol, char):
                    return f"Error3: Symbol mismatch: {char}, {top_symbol}"
                
           
            elif char == '{':
                self.stack.append(('(', char_index))  
            elif char == '}':
                if not self.stack:
                    return f"Error2: Empty stack popped: {char}"
                top_symbol, top_index = self.stack.pop()
                if top_symbol != '(':
                    return f"Error3: Symbol mismatch: {char}, {top_symbol}"
            elif char == '[':
                self.stack.append(('(', char_index)) 
            elif char == ']':
                if not self.stack:
                    return f"Error2: Empty stack popped: {char}"
                top_symbol, top_index = self.stack.pop()
                if top_symbol != '(':
                    return f"Error3: Symbol mismatch: {char}, {top_symbol}"
            elif char == '(':
                self.stack.append((char, char_index))

        if self.stack:
            top_symbol, top_index = self.stack.pop()
            return f"Error1: Non-empty stack after parsing: {top_symbol} at index {top_index}"
        else:
            return "Symbol Balanced"

    @staticmethod
    def isMatchingPair(opening, closing):
        return (opening == '(' and closing == ')' or
                opening == '[' and closing == ']' or
                opening == '{' and closing == '}')

if __name__ == "__main__":
    symbol_balance = SymbolBalance()
    input_str = input("Enter an expression: ")
    syntax_result = symbol_balance.checkSyntax(list(input_str))  
    print(syntax_result)
